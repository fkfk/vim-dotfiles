vimshell

zshをも超える究極のShell
                        Shougo

--------------------------------
vimshellとは？

VimScriptによって実装された究極のシェル。
略してvshell。ただし、eshellとは違ってまだまだ未完成です。
一番の特徴としては、Vimのプラグインと連携ができること。
特にWindowsはシェルが貧弱なので、使用していてイライラしますが、vimshellはWindowsでも動作するので安心です。
ただしWindows上では一部の機能が制限されます。
加えて、他のシェルの便利な機能を多数取り込んでいます。
設定して当たり前の機能は標準的に使えるため、zshと比べて設定の手間もありません。

--------------------------------
入手方法

http://github.com/Shougo/vimshell/tree/master （毎週更新）

ちゃんとしたドキュメントができたらwww.vim.orgにも登録したいです。
しかし仕様が安定していないこともあり、登録はまだまだ先になるでしょう。

--------------------------------
使い方

--------------------------------
似た感じのスクリプト

・vimsh.vim
・Shell.vim
・Vim-Shellプロジェクト
・eshell.el
・ansi-term.el

--------------------------------
vimsh.vimの良いところ
・インタラクティブなシェルが起動できる（Windows以外）
・Vimから独立している

vimsh.vimの悪いところ
・Pythonインタフェースが必要
・バグが多い
・必要なくても勝手に起動する

--------------------------------
Shell.vimの良いところ
・動作が単純
・完全にVimScriptで動作する
・一部が内部コマンドで実現されている

Shell.vimの悪いところ
・もう長い間更新されてない
・インタラクティブなプログラムを起動するとフリーズしてしまう

--------------------------------
Vim-Shellプロジェクトの良いところ
・内部で完全なシェルを動作させることができる
・エスケープシーケンスを解釈するので、色分けもできる

Vim-Shellプロジェクトの悪いところ
・あまりに巨大なパッチなので、本家に取り込まれることはない
・Vimのバージョンごとの互換性がない
・しかも更新頻度が遅い（Vim7.2には未対応）

--------------------------------
eshell.elの良いところ
・完全なシェルを動作させることができる
・完全にEmacs内で動作する
・cursesも動作する（ansi-term.elを使った方がよい）
・色分けもできる
・情報が多い

eshell.elの悪いところ
・Emacsen専用
・起動が遅い

--------------------------------
ansi-term.elの良いところ
・完全なターミナルを動作させることができる
・cursesも動作する
・色分けもできる

ansi-term.elの悪いところ
・Emacsen専用
・日本語入力ができない

--------------------------------
vimshell.vimの良いところ
・完全にVim内で動作する
・色分けもできる
・開発が早い
・Vimのプラグインと連携ができる
・ワンライナー対応
・実験的ながら、非同期実行をサポート
・自動ディレクトリスタックや、auto_cdなど、zshの機能を取り込んでいる
・内部コマンドを簡単に追加可能

vimshell.vimの悪いところ
・まだ内部コマンドのリダイレクトやパイプラインは実現できていない
・制御構造がないので、スクリプト機能が貧弱
・情報が少ない
・マニュアルがない
・仕様が頻繁に変わる

--------------------------------
vimshellの歴史

Shell.vimの表示が見づらいので色分けを始める
　　　　　　↓
　　内部が汚かったので、大幅改造
　　　　　　↓
もはや別物になったのでvimshellに改名
　　　　　　↓
　　githubで公開してみる
　　　　　　↓
　　　　反響大きい
　　　　　　↓
thincaさんの薦めで、内部をプラグイン化
　　　　　　↓
ついカッとなり、zshの機能を取り込む
　　　　　　↓
ついカッとなり、ワンライナー対応してみる
　　　　　　↓
　　　　さらなる暴走
　　　　　　↓
　　そして現在に至る……

詳しくはChangeLog:で。

--------------------------------
vimshellの代表的機能

・色分け
・ヒストリ
・他のプラグインとの連携
・ディレクトリスタック
・auto_cd
・スクリプト実行
・シェル呼び出し
・ワンライナー対応
・簡易電卓
・プラグインによる機能拡張
・aliasコマンド
・シェル変数もどき
・非同期実行（実験的機能）
・独自のカレントディレクトリ
・vimコマンド
・コマンドラインスタック

--------------------------------
色分け

vimshellバッファ上で、.ファイルやディレクトリ、実行ファイル等を認識し、見やすいように色分けをします。

ちなみに、vimshのToDoにも色分けのことは書いてあったので、vimshellのほうが先に実装したことになります。
今後はエスケープシーケンスも認識したいです。

--------------------------------
ヒストリ

私はものぐさなので、ヒストリ機能には力を注いでいます。
ヒストリ一覧はhistoryコマンドで参照できます。
入力時にオムニ補完を起動すると、ヒストリ補完になります。
これは非常に便利なので、是非お使いください。
今まで入力したコマンドラインの上で<CR>してもヒストリ実行できます。
当然のように、ヒストリはvimshell内で共有しているので、別のvimshellからもヒストリが参照できます。

ヒストリに記録したくないときは、コマンドの先頭に空白文字を入れます。
zshのように、連続したコマンドはヒストリに記録しません。

--------------------------------
他のプラグインとの連携

vimshellはほぼ100% Vimの機能を使って実装されているので、他のプラグインと連携させることができます。
というより、これがなかったら私もvimshellは使ってないと思います。
編集はVimの機能をそのまま使えますし、キーマッピングも自由自在です。

例えばneocomplcacheと連携させることで、ヒストリからの引数補完や、自動ディレクトリ補完が実現できます。

--------------------------------
ディレクトリスタック

bashやzshのように、ディレクトリスタックを当然完備。
しかも何も設定せずにauto_pushdしてくれるので、pushdコマンドはありません（！）
ディレクトリスタックを参照するにはdirsコマンド、ディレクトリスタックからcdするにはpopdコマンドを使います。

--------------------------------
シェル呼び出し

非同期実行など、vimshellでは対応できない用途にも対応するため、
shellコマンドでシェルを一時的に呼び出せるようになっています。
shell&とすると、バックグラウンドでシェルを実行します。

--------------------------------
screen実行

screen コマンド名　で、コマンドをscreen上で実行できます。
irbなどの非同期実行に便利です。ただしscreen上のターミナルでないと、シェルのバックグラウンド実行になります。

--------------------------------
バックグラウンド実行

プログラム名の最後に&をつけると、プログラムをバックグラウンドで実行します。
プログラムの出力もバッファで確認できるので、非同期実行に便利です。
vimprocがないと、通常のシェルを使ったバックグラウンド実行になります。
iexeと組み合わせると、別バッファで簡単にインタプリタを実行できます。
強制終了したいときは、<C-c>です。

"iexe コマンド名&"と"コマンド名&"の違いは、
"iexe"の場合はプログラムにキーボードからの入力を送りますが、"コマンド名&"の場合はプログラムに一切入力を与えないことです。

--------------------------------
auto_cd

ディレクトリ名で実行すると、そのディレクトリに移動します。
zshの機能を移植しました。
例えば、..で上のディレクトリへ移動できます。これはまさにLife Changingな機能です。

--------------------------------
スクリプト実行

vimshコマンドの引数にスクリプトファイルを指定することで、
スクリプトファイルに書かれたコマンドを入力として、実行を行います。
ただし、まだ制御構造が実装されていないため、不完全です。

vimshellは初期化ファイルとして、.vimshrcを読み込みます。
aliasの設定はそこで行っておくと便利です。

--------------------------------
ワンライナー対応

Windowsではワンライナーが正常に動作しないのに腹を立てて、実験的に実装しました。
具体的には、一時ファイルに書き出して、それを実行させています。
Perl, Ruby, Python, Awk, sedに対応。

--------------------------------
簡易電卓

evコマンドを使用すると、引数をVimScriptとして評価するため、簡易的な電卓として使えます。
Vim7.2以降ならば、少数を使用した計算にも対応しています。

例：
vimshell% ev 3+3
6

--------------------------------
プラグインによる機能拡張

vimshellの内部コマンドとして、autoload/internal/にある*.vimファイルを読み込むため、
自分でそこにプラグインファイルを追加することで、簡単にコマンドが追加できます。
今後、プラグイン作成のためのマニュアルを作る予定です。

--------------------------------
aliasコマンド

コマンドにalias名をつけることができます。
コマンドの簡略化に便利。ちゃんと引数やパイプも認識します。

例：
alias hoge=ls -la

--------------------------------
シェル変数もどき

hoge=34 などとすることで、簡単に環境変数に書き込めるので、シェル変数もどきとなります。
今後は本当のシェル変数を実装する予定です。

--------------------------------
非同期実行（実験的機能）

vimprocを使って実装中です。ようやくLinuxでは動作するようになりました。
"iexe コマンド名"で動作します。
しかしWindowsではパイプを使った処理となるため、インタプリタの動作が異なります。
どうやらAPIがサポートされてないらしく、諦めるほかありません。
出力を取るためにはEnterを押す必要があったりと、若干癖がありますが、
Vimから様々なインタプリタを動作させることができるのは驚きです。

--------------------------------
独自のカレントディレクトリ

vimshellはVimのカレントディレクトリとは別に独自のカレントディレクトリを持っていて、
カレントディレクトリの保存や復元を自動で行います。

--------------------------------
vimコマンド

"vim ファイル名"というコマンドを実行することで、指定したファイルをvimで開きます。
"view ファイル名"とすると、読み込み専用で開きます。
ちょっとファイルの中身を確認したいときに便利。
neocomplcacheと併用するとファイル名補完が自動でできるので、":edit"で補完するより早いです。

--------------------------------
コマンドラインスタック

コマンド入力中に<C-z>を押すと、一度コマンドラインがクリアされ、次に<CR>を押したときに復元されます。
スタックになっているので、連続して行うこともできます。
この機能はzshからインスパイアされました。

--------------------------------
ファイルの関連づけ

g:VimShell_ExecuteFileListにプログラムが登録されていたら、
実行時にプログラムを呼び出すようにしました。
Windowsでいうファイルの関連づけになります。zshにも似たような機能がありました。

例えば let g:VimShell_ExecuteFileList['rb'] = 'ruby' としておくと、
./hoge.rb
でrubyプログラムを実行できます。

--------------------------------
プロンプト移動

Normal modeで<C-p>, <C-n>を押すと、プロンプトを移動できます。
コマンドの履歴を参照するときに便利です。

--------------------------------
キーバインド等のカスタマイズ

vimshellのキーバインドはftplugin/vimshell.vimにて定義されています。
よって、after/ftplugin/vimshell.vimを作成すれば、簡単にカスタマイズできます。

--------------------------------
私の設定

" Initialize execute file list.
let g:VimShell_ExecuteFileList = {}
let g:VimShell_ExecuteFileList['txt'] = 'vim'
let g:VimShell_ExecuteFileList['vim'] = 'vim'
let g:VimShell_ExecuteFileList['rb'] = 'ruby'
let g:VimShell_ExecuteFileList['pl'] = 'perl'
let g:VimShell_ExecuteFileList['py'] = 'python'

if has('win32') || has('win64') 
    " Display user name on Windows.
    let g:VimShell_Prompt = $USERNAME."% "

    " Use ckw.
    let g:VimShell_UseCkw = 1
else
    " Display user name on Linux.
    let g:VimShell_Prompt = $USER."% "

    call vimshell#set_execute_file('bmp,jpg,png,gif', 'eog')
endif

プロンプトをユーザ名にしているだけで、後は凝った設定はしてないです。
neocomplcacheでは、ヒストリファイルを辞書として使用してます。
これはなかなか便利です。
g:VimShell_ExecuteFileListによる関連づけも設定しています。

--------------------------------
日本語情報

あのtaku_oさんに紹介されました！！
http://d.hatena.ne.jp/taku-o/20090126

pcmasterさんによる紹介
http://d.hatena.ne.jp/pcmaster/20090505/p1
最近はてなブックマークがものすごいことになってます。
やはり皆さん、今までのシェルには不満を持っているようですね。

--------------------------------
今後の予定

vimshellの歴史は以外と古く、neocomplcacheより前から作り始めていました。
最近ではneocomplcacheの開発に忙しく、vimshellの機能追加はおざなりになっています。
しかしneocomplcacheが安定し、ようやく余裕が出てきたので、今後は貧弱なスクリプト機能を改善する予定です。
非同期実行もさらに安定させなければなりません。

--------------------------------
まとめ

機能追加の要望やバグ、質問等があれば、githubのIssuesに書いてください。
http://github.com/Shougo/vimshell/issues
まめにチェックをしているので、皆さんのブログに書いていただいてもかまいません。

Twitterやブログもやってます。
http://vinarian.blogspot.com/
http://twitter.com/ShougoMatsu
更新情報は主にブログに、重要な情報はTwitterでもアナウンスする予定です。

夢はシェルに戻らなくても、ほとんどの作業をvimshell内で完結できるようにすることです。
皆さんの手で、最強のシェルを手に入れましょう。

--------------------------------
更新履歴

2009/05/23      Ver.5.11に対応。
2009/05/7       Ver.5.8に対応。
2009/03/7       やっつけで作成。
--------------------------------
