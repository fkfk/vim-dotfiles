vimshell

zshをも超える究極のShell
                        Shougo

--------------------------------
まずは自己紹介

Shougo
Vim歴４年目。だが、本格的にVimに目覚めたのはごく最近のこと。
Vimを使い始めたのは、Vimは多数の言語に対してsyntaxハイライトができたから。
最近までneocomplcacheの開発に忙しかったが、
まだまだvimshellもやることがいっぱいあって現実逃避中。

--------------------------------
代表作
・bufstatus
http://github.com/Shougo/shougo-s-github/blob/a1a9d5d0a9a4a53fedec52f7d1be0c9c9341f787/vim/plugin/bufstatus.vim
・vimshell
https://github.com/Shougo/vimshell/tree
・neocomplcache
https://github.com/Shougo/neocomplcache/tree

今回は、みんながお待ちかねのvimshellについて話をします。

--------------------------------
vimshellとは？

VimScriptによって実装された究極のシェル。
略してvshell。ただし、eshellとは違ってまだまだです。
一番の特徴としては、Vimのプラグインと連携ができること。
Windowsはシェルがしょぼいので、使用していてイライラしますが、
vimshellはWindowsでも動作するので安心です。
しかも、他のシェルの便利な機能を多数取り込んでいます。
設定して当たり前の機能は標準的に使えるため、zshと比べて設定の手間もありません。

--------------------------------
似た感じのスクリプト

・vimsh.vim
・Shell.vim
・Vim-Shellプロジェクト
・eshell.el
・ansi-term.el

--------------------------------
vimsh.vimの良いところ
・インタラクティブなシェルが起動できる
・Vimから独立している

vimsh.vimの悪いところ
・Pythonインタフェースが必要
・バグ多い
・必要なくても勝手に起動する

--------------------------------
Shell.vimの良いところ
・動作が単純
・完全にVimScriptで動作する
・一部が内部コマンドで実現されている

Shell.vimの悪いところ
・もう長い間更新されてない
・インタラクティブなプログラムを起動するとフリーズ

--------------------------------
Vim-Shellプロジェクトの良いところ
・完全なシェルを動作させることができる
・色分けもできる

Vim-Shellプロジェクトの悪いところ
・あまりに巨大なパッチなので、本家に取り込まれることはない
・Vimのバージョンごとの互換性がない
・しかも更新頻度が遅い

--------------------------------
eshell.elの良いところ
・完全なシェルを動作させることができる
・完全にEmacs内で動作する
・cursesも動作する（ansi-term.elを使った方がよい）
・色分けもできる
・情報多い

eshell.elの悪いところ
・Emacsen専用
・起動が重い

--------------------------------
ansi-term.elの良いところ
・完全なターミナルを動作させることができる
・cursesも動作する
・色分けもできる

ansi-term.elの悪いところ
・Emacsen専用
・日本語入力ができない

--------------------------------
vimshell.vimの良いところ
・完全にVim内で動作する
・色分けもできる
・開発早い
・他のプラグインと連携できる
・ワンライナー対応
・実験的ながら、非同期実行をサポート
・自動ディレクトリスタックや、auto_cdなど、zshの機能を取り込んでいる

vimshell.vimの悪いところ
・入力を必要とする非同期実行はサポートされない
・まだ内部コマンドのリダイレクトやパイプラインは実現できてない
・制御構造がない
・情報少ない

--------------------------------
vimshellの歴史

Shell.vimの表示が見づらいので色分けを始める
　　　　　　↓
　　内部が汚かったので、大幅改造
　　　　　　↓
もはや別物になったのでvimshellに改名
　　　　　　↓
　　githubで公開してみる
　　　　　　↓
　　　　反響大きい
　　　　　　↓
thincaさんの薦めで、内部をプラグイン化
　　　　　　↓
ついカッとなり、zshの機能を取り込む
　　　　　　↓
ついカッとなり、ワンライナー対応してみる
　　　　　　↓
　　　　さらなる暴走
　　　　　　↓
　　そして現在に至る……

詳しくはChangeLog:で。

--------------------------------
vimshellの代表的機能

・色分け
・ヒストリ
・他のプラグインとの連携
・ディレクトリスタック
・auto_cd
・スクリプト実行
・シェル呼び出し
・ワンライナー対応
・簡易電卓
・プラグインによる機能拡張
・aliasコマンド
・シェル変数もどき
・非同期実行（実験的機能）
・独自のカレントディレクトリ
・vimコマンド
・コマンドラインスタック

--------------------------------
色分け

vimshellバッファ上で、.ファイルやディレクトリ、実行ファイル等を認識し、
見やすいように色分けをします。

ちなみに、vimshのToDoにも色分けのことは書いてあったので、
vimshellのほうが先に実装したことになります。

--------------------------------
ヒストリ

私はものぐさなので、ヒストリ機能には力を注いでいます。
ヒストリ一覧はhistoryコマンドで参照できます。
入力時にオムニ補完すると、ヒストリ補完になります。
これは非常に便利なので、是非お使いください。
今まで入力したコマンドラインの上で<CR>してもヒストリ実行できます。
当然のように、ヒストリはvimshell内で共有しているので、別のvimshellからもヒストリが参照できます。

ヒストリに記録したくないときは、コマンドの先頭に空白文字を入れます。
連続したコマンドはヒストリに記録しません。

--------------------------------
他のプラグインとの連携

vimshellはほぼ100% Vimの機能を使って実装されているので、
他のプラグインと連携させることができます。
というより、これがなかったら私もvimshellは使ってないと思います。

例えばneocomplcacheと連携させることで、ヒストリからの引数補完や、自動ディレクトリ補完が実現できます。
vimshellのバッファをたどればヒストリ実行もできます。

--------------------------------
ディレクトリスタック

bashやzshのように、ディレクトリスタックを当然完備。
しかも何も設定せずにauto_pushdしてくれるので、pushdコマンドはありません（！）
ディレクトリスタックを参照するにはdirsコマンド、
ディレクトリスタックからcdするにはpopdコマンドを使います。

--------------------------------
シェル呼び出し

非同期実行など、vimshellではできない用途にも対応するため、
shコマンドでシェルを一時的に呼び出せるようになってます。

--------------------------------
screen実行

screen コマンド名　で、screen分割して実行できます。
irbなどの非同期実行に便利です。ただしWindowsでは使えません。

--------------------------------
バックグラウンド実行

プログラム名の最後に&をつけると、バックグラウンドで呼び出します。
非同期実行に便利ですが、出力は取れません。

--------------------------------
auto_cd

ディレクトリ名で実行すると、そのディレクトリに移動します。
zshの機能を移植しました。
例えば、..で上のディレクトリへ移動できます。
これはLife Changing!

--------------------------------
スクリプト実行

vimshコマンドの引数にスクリプトファイルを指定することで、
スクリプトファイルのコマンドを入力として、実行を行います。
ただし、まだ制御構造が実装されていないため、不完全です。

vimshellは初期化ファイルとして、.vimshrcを読み込みます。
aliasの設定はそこで行っておくと便利です。

--------------------------------
ワンライナー対応

Windowsで、ワンライナーが動作しないのに腹を立てて、実験的に実装。
具体的には、一時ファイルに書き出して、それを実行させてます。
Perl, Ruby, Python, Awk, sedに対応。

--------------------------------
簡易電卓

evコマンドを使用すると、引数をVimScriptとして評価するため、
簡易的な電卓として使えます。

例：
vimshell% ev 3+3
6

--------------------------------
プラグインによる機能拡張

vimshellの内部コマンドはautoload/internal/にある*.vimファイルを
使用するため、自分でそこにプラグインファイルを追加することで、
簡単にコマンドが追加できます。
今後、プラグイン作成のためのマニュアルを作る予定です。

--------------------------------
aliasコマンド

コマンドにaliasをつけることができます。
コマンドの簡略化に便利。ちゃんと引数も認識します。

例：
alias hoge=ls -la

--------------------------------
シェル変数もどき

hoge=34 などとすることで、簡単に環境変数に書き込めるので、シェル変数もどきとなります。
今後は本当のシェル変数を実装する予定です。

--------------------------------
非同期実行（実験的機能）

vimprocを使って実装中です。
一応動くのですが、まだ非同期実行になってません。
誰か分かる人がいたら、やり方を教えてください。

--------------------------------
独自のカレントディレクトリ

vimshellはVimのカレントディレクトリとは別に独自のカレントディレクトリを持っていて、
カレントディレクトリの復元を自動で行います。

--------------------------------
vimコマンド

vim ファイル名　というコマンドを実行することで、
指定したファイルをvimで開きます。
view ファイル名　とすると、読み込み専用で開きます。
ちょっと中身を確認したいときに便利。

--------------------------------
コマンドラインスタック

コマンド入力中に<C-z>を押すと、一度コマンドラインがクリアされ、
次に<CR>を押したとき、復元されます。
スタックになっているので、連続して行うこともできます。
この機能はzshからインスパイアされました。

--------------------------------
ファイルの関連づけ

g:VimShell_ExecuteFileListにプログラムが登録されていたら、
実行時にプログラムを呼び出すようにしました。
Windowsでいう関連づけになります。zshにも似たような機能がありました。

例えば let g:VimShell_ExecuteFileList['rb'] = 'ruby' としておくと、
./hoge.rb
でrubyプログラムを実行できます。

--------------------------------
プロンプト移動

Normal modeで<C-p>, <C-n>を押すと、プロンプトを移動できます。
履歴を参照するときに便利です。

--------------------------------
キーバインド等のカスタマイズ

vimshellのキーバインドはftplugin/vimshell.vimにて定義されています。
よって、after/ftplugin/vimshell.vimを作成すれば、簡単にカスタマイズできます。

--------------------------------
私の設定

" Initialize execute file list.
let g:VimShell_ExecuteFileList = {}
let g:VimShell_ExecuteFileList['txt'] = 'vim'
let g:VimShell_ExecuteFileList['vim'] = 'vim'
let g:VimShell_ExecuteFileList['rb'] = 'ruby'
let g:VimShell_ExecuteFileList['pl'] = 'perl'
let g:VimShell_ExecuteFileList['py'] = 'python'

if has('win32') || has('win64') 
    " Display user name on Windows.
    let g:VimShell_Prompt = $USERNAME."% "

    " Use ckw.
    let g:VimShell_UseCkw = 1
else
    " Display user name on Linux.
    let g:VimShell_Prompt = $USER."% "

    call vimshell#set_execute_file('bmp,jpg,png,gif', 'eog')
endif

プロンプトをユーザ名にしているだけで、後は凝った設定はしてないです。
neocomplcacheでは、ヒストリファイルを辞書として使用してます。
これはなかなか便利。
g:VimShell_ExecuteFileListによる関連づけも設定しています。

--------------------------------
日本語情報

あのtaku_oさんに紹介されました！！
http://d.hatena.ne.jp/taku-o/20090126

--------------------------------
入手方法

http://github.com/Shougo/vimshell/tree/master （毎週更新）

ちゃんとしたドキュメントができたらwww.vim.orgにも登録したいです。

--------------------------------
使い方

--------------------------------
サポート

何か問題があれば、http://www.lingr.com/room/vim-users.jpまで！（宣伝）

--------------------------------
まとめ

せっかく作ったので、皆さん使ってみてください。
夢は「名無しのVim使い」で紹介されること。

--------------------------------
次回はどうしようかな……。

続く？

--------------------------------
更新履歴

2009/05/7      Ver.5.8に対応。
2009/03/7      やっつけで作成。
--------------------------------
