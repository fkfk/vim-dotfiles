[[plugins]]
repo = 'cairo140/actionscript.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'
on_cmd = ['EditorConfigReload']

[[plugins]]
repo = 'mattn/emmet-vim'
on_cmd = ['Emmet', 'EmmetInstall']
on_func = ['emmet']
on_map = ['<C-y>']

[[plugins]]
repo = 'fkfk/eregex.vim'
on_cmd = ['E2v', 'Match', 'Substitute', 'Global', 'Vglobal']
on_func = ['E2v']

[[plugins]]
repo = 'vim-scripts/grep.vim'
on_cmd = [
  'Grep',
  'GrepAdd',
  'Rgrep',
  'RgrepAdd',
  'GrepBuffer',
  'GrepBufferAdd',
  'Bgrep',
  'BgrepAdd',
  'GrepArgs',
  'GrepArgsAdd',
  'Fgrep',
  'FgrepAdd',
  'Rfgrep',
  'RfgrepAdd',
  'Egrep',
  'EgrepAdd',
  'Regrep',
  'RegrepAdd',
  'Agrep',
  'AgrepAdd',
  'Ragrep',
  'RagrepAdd'
]

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = ['JunkfileOpen']
on_func = ['junkfile']

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'
on_source = ['unite.vim']

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'phux/phpfolding.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarOpen', 'TagbarClose', 'TagbarToggle', 'Tagbar', 'TagbarOpenAutoClose', 'TagbarTogglePause', 'TagbarSetFoldlevel', 'TagbarShowTag', 'TagbarCurrentTag', 'TagbarGetTypeConfig', 'TagbarDebug', 'TagbarDebugEnd']

[[plugins]]
repo = 'davidoc/taskpaper.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']
on_func = ['unite']
on_source = ['vimfiler.vim']

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_func = ['unite']
on_source = ['vimfiler.vim']
depends = ['unite.vim']

[[plugins]]
repo = 'Shougo/unite-ssh'
on_func = ['unite']
on_source = ['vimfiler.vim']
depends = ['unite.vim']

[[plugins]]
repo = 'kana/vim-altercmd'
on_map = [':']
on_cmd = ['cd', 'CD', 'TabpageCD', 'AlterCommand', 's', 'S']
hook_post_source = '''
  call g:myvimrc.rc.lazyconfig.altercmd()
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = ['<Plug>(anzu-']
on_func = ['anzu']

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = ['<Plug>(choosewin)']

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Blackrush/vim-gocode'
on_ft = ['go']

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  autocmd MyAutoCmd VimEnter * nested
  \ se bg=dark
  \| colorscheme hybrid
  \| hi! SpecialKey ctermfg=255 ctermbg=52 guifg=#ffffff guibg=#5f0000
'''

[[plugins]]
repo = 'hallison/vim-markdown'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
on_func = ['quickrun']

[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = ['Ref', 'RefHistory']
on_func = ['ref']
on_map = ['<Plug>(ref']

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
hook_post_source = '''
  call g:myvimrc.rc.lazyconfig.smartinput()
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'
on_cmd = ['VCSAdd', 'VCSAnnotate', 'VCSBlame', 'VCSCommit', 'VCSDelete', 'VCSDiff', 'VCSGotoOriginal', 'VCSLog', 'VCSRemove', 'VCSRevert', 'VCSReview', 'VCSStatus', 'VCSUpdate', 'VCSVimDiff']

[[plugins]]
repo = 'joonty/vdebug'
on_cmd = ['Breakpoint', 'VdebugEval', 'VdebugEval!', 'VdebugTrace', 'VdebugOpt']
on_map = ['<F5>', '<F2>', '<F3>', '<F4>', '<F6>', '<F7>', '<F9>', '<F10>', '<F11>', '<F12>', '<Leader>e']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_path = '.*'
on_cmd = ['VimFiler']
depends = ['unite.vim']

[[plugins]]
repo = 'Shougo/vimproc'
merged = 0
hook_add = '''
  if dein#util#_is_windows()
    let s:vimproc_dll_basename = has('win64') ?
          \ 'vimproc_win64.dll' : 'vimproc_win32.dll'
  elseif dein#util#_is_cygwin()
    let s:vimproc_dll_basename = 'vimproc_cygwin.dll'
  elseif dein#util#_is_mac()
    let s:vimproc_dll_basename = 'vimproc_mac.so'
  elseif glob('/lib*/ld-linux*64.so.2', 1) != ''
    let s:vimproc_dll_basename = 'vimproc_linux64.so'
  elseif glob('/lib*/ld-linux*.so.2', 1) != ''
    let s:vimproc_dll_basename = 'vimproc_linux32.so'
  elseif system('uname -s') =~? '^.\+BSD\n$'
    let s:vimproc_dll_basename = system(
          \ 'uname -sm | tr "[:upper:]" "[:lower:]"'
          \ .' | sed -e "s/ /_/" | xargs -I "{}" echo "vimproc_{}.so"')[0 : -2]
  else
    let s:vimproc_dll_basename = 'vimproc_unix.so'
  endif

  let s:vimproc_dll = get(g:, 'vimproc#dll_path', dein#get('vimproc').path . '/lib/'. s:vimproc_dll_basename)

  if !filereadable(s:vimproc_dll)
    call dein#call_hook('post_update')
    call dein#build('vimproc')
  endif
'''
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
    if $MSYSTEM == "MINGW32" || $MSYSTEM == "MINGW64"
      let cmd = "MSYSTEM=MSYS bash --login -c 'cd " . g:dein#plugin.path . ";" . cmd . "'"
    endif
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell'
depends = ['vimproc']

[[plugins]]
repo = 'ujihisa/vimshell-ssh'
depends = ['vimshell']
